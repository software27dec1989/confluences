import requests
from operator import itemgetter
from datetime import datetime
import time

# Configuration
confluence_url = "https://abc-confluence.systems.uk.abcs/confluence"
parent_page_id = "065625"  # Parent page ID for "Block Fulfilment"
bearer_token = "your_bearer_token"  # Replace with your actual Bearer token

# API endpoint for child pages
api_url = f"{confluence_url}/rest/api/content/{parent_page_id}/child/page"

# Headers for authentication
headers = {
    "Authorization": f"Bearer {bearer_token}",
    "Content-Type": "application/json"
}

# Function to get all child pages with pagination and rate limiting
def get_all_child_pages(api_url):
    child_pages = []
    retry_attempts = 5  # Number of times to retry in case of 429 error
    while api_url:
        for attempt in range(retry_attempts):
            response = requests.get(api_url, headers=headers)
            
            if response.status_code == 200:
                # Successful request, process response
                response_data = response.json()
                child_pages.extend(response_data.get("results", []))
                
                # Check if there is a next page
                next_page_url = response_data.get("_links", {}).get("next")
                if next_page_url:
                    api_url = confluence_url + next_page_url  # Build the full URL for the next page
                else:
                    api_url = None  # No more pages
                break  # Exit retry loop since request was successful
            
            elif response.status_code == 429:
                # Rate limited, handle retry after delay
                retry_after = int(response.headers.get("Retry-After", 10))  # Default to 10 seconds if not provided
                print(f"Rate limited. Retrying after {retry_after} seconds...")
                time.sleep(retry_after)  # Wait before retrying
            else:
                print(f"Failed to retrieve child pages. Status code: {response.status_code}")
                break
    return child_pages

# Fetch all child pages
child_pages = get_all_child_pages(api_url)

# Sort child pages by 'created' field in descending order, handling None values
child_pages_sorted = sorted(child_pages, key=lambda x: x.get("history", {}).get("createdDate", ""), reverse=True)

# Print the titles and creation dates of the sorted child pages
print("Child Pages under 'Block Fulfilment' (sorted by creation date):")
for page in child_pages_sorted:
    title = page.get("title")
    page_id = page.get("id")
    created_date = page.get("history", {}).get("createdDate", "Unknown date")
    
    # Format the created date if available
    if created_date != "Unknown date":
        try:
            created_date_formatted = datetime.strptime(created_date, '%Y-%m-%dT%H:%M:%S.%fZ').strftime('%Y-%m-%d %H:%M:%S')
        except ValueError:
            # Handle cases where the format might be slightly different
            created_date_formatted = datetime.strptime(created_date, '%Y-%m-%dT%H:%M:%S.%f%z').strftime('%Y-%m-%d %H:%M:%S')
    else:
        created_date_formatted = "Unknown date"
    
    print(f" - {title} (ID: {page_id}) | Created on: {created_date_formatted}")
